package faucet

import (
	"context"
	"fmt"
	"ftm-explorer/internal/config"
	"ftm-explorer/internal/logger"
	"ftm-explorer/internal/repository"
	"ftm-explorer/internal/repository/db"
	"ftm-explorer/internal/repository/rpc"
	"math/big"
	"strconv"
	"testing"
	"time"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/golang/mock/gomock"
	"github.com/testcontainers/testcontainers-go"
	"github.com/testcontainers/testcontainers-go/wait"
)

// Test that the faucet wallet can send wei to an address.
func TestFaucetWallet_SendWeiToAddress(t *testing.T) {
	ctrl := gomock.NewController(t)
	receiver := common.HexToAddress("0x5A4b203939F9757A703e009fA9B733Cf33d5821b")

	// start test chain
	url := startTestChain(t)

	// initialize stubs and rpc client that will connect to test chain
	log := logger.NewMockLogger()
	database := db.NewMockDatabase(ctrl)
	client, err := rpc.NewOperaRpc(&config.Rpc{
		OperaRpcUrl: url,
	})
	if err != nil {
		t.Fatal(err)
	}

	// initialize eth client so we can check balances of accounts
	ethClient, err := ethclient.Dial(url)
	if err != nil {
		t.Fatal(err)
	}

	// initialize repository
	repo := repository.NewRepository(10_000, client, database, nil)

	// initialize wallet
	wallet, err := NewWallet(repo, log, "bb39aa88008bc6260ff9ebc816178c47a01c44efe55810ea1f271c00f5878812")
	if err != nil {
		t.Fatal(err)
	}

	// get initial balances
	senderBalance, err := ethClient.BalanceAt(context.Background(), wallet.from, nil)
	if err != nil {
		t.Fatal(err)
	}
	receiverBalance, err := ethClient.BalanceAt(context.Background(), receiver, nil)
	if err != nil {
		t.Fatal(err)
	}

	// send 2.5 eth to receiver
	wei := getTokensAmountInWei(2.5)
	err = wallet.SendWeiToAddress(wei, receiver)

	// get updated balances
	senderBalanceUpdated, err := ethClient.BalanceAt(context.Background(), wallet.from, nil)
	if err != nil {
		t.Fatal(err)
	}
	receiverBalanceUpdated, err := ethClient.BalanceAt(context.Background(), receiver, nil)
	if err != nil {
		t.Fatal(err)
	}

	// calculate tx fee, 21_000 is simple tx cost, 6_721_975 is gas price configured in ganache
	txFee := new(big.Int).Mul(new(big.Int).SetUint64(21_000), new(big.Int).SetUint64(6_721_975))

	// check amount was transferred
	if senderBalanceUpdated.Cmp(senderBalance.Sub(senderBalance, wei).Sub(senderBalance, txFee)) != 0 {
		t.Fatalf("sender balance was not updated correctly")
	}
	if receiverBalanceUpdated.Cmp(receiverBalance.Add(receiverBalance, wei)) != 0 {
		t.Fatalf("receiver balance was not updated correctly")
	}
}

func TestFaucetWallet_Nevim(t *testing.T) {
	ctrl := gomock.NewController(t)
	receiver := common.HexToAddress("0x5A4b203939F9757A703e009fA9B733Cf33d5821b")

	// start test chain
	url := startTestChain(t)

	// initialize stubs and rpc client that will connect to test chain
	log := logger.NewMockLogger()
	database := db.NewMockDatabase(ctrl)
	client, err := rpc.NewOperaRpc(&config.Rpc{
		OperaRpcUrl: url,
	})
	if err != nil {
		t.Fatal(err)
	}

	// initialize repository
	repo := repository.NewRepository(10_000, client, database, nil)

	// initialize wallet
	wallet, err := NewWallet(repo, log, "bb39aa88008bc6260ff9ebc816178c47a01c44efe55810ea1f271c00f5878812")
	if err != nil {
		t.Fatal(err)
	}

	// deploy erc20 contract
	contractAddress := deployErc20Contract(t, client)

	// mint erc 20 tokens
	err = wallet.MintErc20TokensToAddress(contractAddress, receiver, big.NewInt(1000))
	if err != nil {
		fmt.Println(err)
		t.Fatal(err)
	}
}

// deployErc20Contract deploys an erc20 contract to the test chain.
// It returns the address of the contract.
func deployErc20Contract(t *testing.T, rpc rpc.IRpc) common.Address {
	t.Helper()

	pk, err := crypto.HexToECDSA("bb39aa88008bc6260ff9ebc816178c47a01c44efe55810ea1f271c00f5878812")
	if err != nil {
		t.Fatalf("failed to parse private key: %v", err)
	}

	nonce, err := rpc.PendingNonceAt(context.Background(), common.HexToAddress("0x9Cc2F0FD184E93049A9a6C6C63bc258A39D4B54D"))
	if err != nil {
		t.Fatalf("failed to get nonce: %v", err)
	}

	// data of open-zeppelin erc20 mock contract
	// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v5.0/contracts/mocks/token/ERC20Mock.sol
	data := common.FromHex("0x60806040523480156200001157600080fd5b506040518060400160405280600981526020017f45524332304d6f636b00000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f4532304d0000000000000000000000000000000000000000000000000000000081525081600390816200008f919062000324565b508060049081620000a1919062000324565b5050506200040b565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200012c57607f821691505b602082108103620001425762000141620000e4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001ac7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200016d565b620001b886836200016d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000205620001ff620001f984620001d0565b620001da565b620001d0565b9050919050565b6000819050919050565b6200022183620001e4565b6200023962000230826200020c565b8484546200017a565b825550505050565b600090565b6200025062000241565b6200025d81848462000216565b505050565b5b8181101562000285576200027960008262000246565b60018101905062000263565b5050565b601f821115620002d4576200029e8162000148565b620002a9846200015d565b81016020851015620002b9578190505b620002d1620002c8856200015d565b83018262000262565b50505b505050565b600082821c905092915050565b6000620002f960001984600802620002d9565b1980831691505092915050565b6000620003148383620002e6565b9150826002028217905092915050565b6200032f82620000aa565b67ffffffffffffffff8111156200034b576200034a620000b5565b5b62000357825462000113565b6200036482828562000289565b600060209050601f8311600181146200039c576000841562000387578287015190505b62000393858262000306565b86555062000403565b601f198416620003ac8662000148565b60005b82811015620003d657848901518255600182019150602085019450602081019050620003af565b86831015620003f65784890151620003f2601f891682620002e6565b8355505b6001600288020188555050505b505050505050565b6118e9806200041b6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac14610228578063a457c2d714610244578063a9059cbb14610274578063dd62ed3e146102a4576100cf565b806340c10f19146101be57806370a08231146101da57806395d89b411461020a576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce56714610170578063395093511461018e575b600080fd5b6100dc6102d4565b6040516100e99190610fdc565b60405180910390f35b61010c60048036038101906101079190611097565b610366565b60405161011991906110f2565b60405180910390f35b61012a610384565b604051610137919061111c565b60405180910390f35b61015a60048036038101906101559190611137565b61038e565b60405161016791906110f2565b60405180910390f35b61017861048f565b60405161018591906111a6565b60405180910390f35b6101a860048036038101906101a39190611097565b610498565b6040516101b591906110f2565b60405180910390f35b6101d860048036038101906101d39190611097565b610544565b005b6101f460048036038101906101ef91906111c1565b610552565b604051610201919061111c565b60405180910390f35b61021261059a565b60405161021f9190610fdc565b60405180910390f35b610242600480360381019061023d9190611097565b61062c565b005b61025e60048036038101906102599190611097565b61063a565b60405161026b91906110f2565b60405180910390f35b61028e60048036038101906102899190611097565b61072e565b60405161029b91906110f2565b60405180910390f35b6102be60048036038101906102b991906111ee565b61074c565b6040516102cb919061111c565b60405180910390f35b6060600380546102e39061125d565b80601f016020809104026020016040519081016040528092919081815260200182805461030f9061125d565b801561035c5780601f106103315761010080835404028352916020019161035c565b820191906000526020600020905b81548152906001019060200180831161033f57829003601f168201915b5050505050905090565b600061037a6103736107d3565b84846107db565b6001905092915050565b6000600254905090565b600061039b8484846109a4565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006103e66107d3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610466576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045d90611300565b60405180910390fd5b610483856104726107d3565b858461047e919061134f565b6107db565b60019150509392505050565b60006012905090565b600061053a6104a56107d3565b8484600160006104b36107d3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105359190611383565b6107db565b6001905092915050565b61054e8282610c21565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546105a99061125d565b80601f01602080910402602001604051908101604052809291908181526020018280546105d59061125d565b80156106225780601f106105f757610100808354040283529160200191610622565b820191906000526020600020905b81548152906001019060200180831161060557829003601f168201915b5050505050905090565b6106368282610d74565b5050565b600080600160006106496107d3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fd90611429565b60405180910390fd5b6107236107116107d3565b85858461071e919061134f565b6107db565b600191505092915050565b600061074261073b6107d3565b84846109a4565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361084a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610841906114bb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b09061154d565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610997919061111c565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0a906115df565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7990611671565b60405180910390fd5b610a8d838383610f47565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0a90611703565b60405180910390fd5b8181610b1f919061134f565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610baf9190611383565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c13919061111c565b60405180910390a350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c879061176f565b60405180910390fd5b610c9c60008383610f47565b8060026000828254610cae9190611383565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d039190611383565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610d68919061111c565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610de3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dda90611801565b60405180910390fd5b610def82600083610f47565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610e75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6c90611893565b60405180910390fd5b8181610e81919061134f565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160026000828254610ed5919061134f565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f3a919061111c565b60405180910390a3505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f86578082015181840152602081019050610f6b565b60008484015250505050565b6000601f19601f8301169050919050565b6000610fae82610f4c565b610fb88185610f57565b9350610fc8818560208601610f68565b610fd181610f92565b840191505092915050565b60006020820190508181036000830152610ff68184610fa3565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061102e82611003565b9050919050565b61103e81611023565b811461104957600080fd5b50565b60008135905061105b81611035565b92915050565b6000819050919050565b61107481611061565b811461107f57600080fd5b50565b6000813590506110918161106b565b92915050565b600080604083850312156110ae576110ad610ffe565b5b60006110bc8582860161104c565b92505060206110cd85828601611082565b9150509250929050565b60008115159050919050565b6110ec816110d7565b82525050565b600060208201905061110760008301846110e3565b92915050565b61111681611061565b82525050565b6000602082019050611131600083018461110d565b92915050565b6000806000606084860312156111505761114f610ffe565b5b600061115e8682870161104c565b935050602061116f8682870161104c565b925050604061118086828701611082565b9150509250925092565b600060ff82169050919050565b6111a08161118a565b82525050565b60006020820190506111bb6000830184611197565b92915050565b6000602082840312156111d7576111d6610ffe565b5b60006111e58482850161104c565b91505092915050565b6000806040838503121561120557611204610ffe565b5b60006112138582860161104c565b92505060206112248582860161104c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061127557607f821691505b6020821081036112885761128761122e565b5b50919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b60006112ea602883610f57565b91506112f58261128e565b604082019050919050565b60006020820190508181036000830152611319816112dd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061135a82611061565b915061136583611061565b925082820390508181111561137d5761137c611320565b5b92915050565b600061138e82611061565b915061139983611061565b92508282019050808211156113b1576113b0611320565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611413602583610f57565b915061141e826113b7565b604082019050919050565b6000602082019050818103600083015261144281611406565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006114a5602483610f57565b91506114b082611449565b604082019050919050565b600060208201905081810360008301526114d481611498565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611537602283610f57565b9150611542826114db565b604082019050919050565b600060208201905081810360008301526115668161152a565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006115c9602583610f57565b91506115d48261156d565b604082019050919050565b600060208201905081810360008301526115f8816115bc565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061165b602383610f57565b9150611666826115ff565b604082019050919050565b6000602082019050818103600083015261168a8161164e565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006116ed602683610f57565b91506116f882611691565b604082019050919050565b6000602082019050818103600083015261171c816116e0565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000611759601f83610f57565b915061176482611723565b602082019050919050565b600060208201905081810360008301526117888161174c565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006117eb602183610f57565b91506117f68261178f565b604082019050919050565b6000602082019050818103600083015261181a816117de565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b600061187d602283610f57565b915061188882611821565b604082019050919050565b600060208201905081810360008301526118ac81611870565b905091905056fea2646970667358221220984a4741f9c187a69e65121bb20b3ec476f3e132040026dcc024d7c8320a171064736f6c63430008130033")
	tx := types.NewContractCreation(
		nonce, new(big.Int).SetUint64(0), 10_000_000_000, new(big.Int).SetUint64(6_721_975), data,
	)

	// sign transaction
	signedTx, err := types.SignTx(tx, types.NewEIP155Signer(big.NewInt(1337)), pk)
	if err != nil {
		t.Fatalf("failed to sign transaction: %v", err)
	}

	// send transaction
	if err = rpc.SendSignedTransaction(context.Background(), signedTx); err != nil {
		t.Fatalf("failed to send transaction: %v", err)
	}

	// get full transaction
	nTx, err := rpc.TransactionByHash(context.Background(), signedTx.Hash())
	if err != nil {
		t.Fatalf("failed to get transaction: %v", err)
	}

	// check if contract address is not nil
	if nTx.ContractAddress == nil {
		t.Fatalf("contract address is nil")
	}

	return *nTx.ContractAddress
}

// startTestChain starts a new test chain. It runs ganache inside docker container.
// It returns the url of the chain.
func startTestChain(t *testing.T) string {
	t.Helper()
	// setup db container
	ctx, cancel := context.WithTimeout(context.Background(), time.Second*60)
	defer cancel()
	container, port := createContainer(t, ctx)
	t.Cleanup(func() {
		if err := container.Terminate(context.Background()); err != nil {
			t.Fatal(err)
		}
	})
	return fmt.Sprintf("http://localhost:%s", port)
}

// createContainer creates a test container for postgres database
func createContainer(t *testing.T, ctx context.Context) (testcontainers.Container, string) {
	t.Helper()
	req := testcontainers.GenericContainerRequest{
		ContainerRequest: testcontainers.ContainerRequest{
			Image:        "trufflesuite/ganache-cli:v6.12.2",
			ExposedPorts: []string{"8545/tcp"},
			Env:          nil,
			WaitingFor:   wait.ForListeningPort("8545/tcp"),
			Cmd: []string{
				"--chainId", strconv.Itoa(1337),
				"--gasLimit", strconv.Itoa(10_000_000_000),
				"--gasPrice", strconv.Itoa(6_721_975),
				// address: 0x9Cc2F0FD184E93049A9a6C6C63bc258A39D4B54D
				"--account", "0xbb39aa88008bc6260ff9ebc816178c47a01c44efe55810ea1f271c00f5878812,200000000000000000000",
				// address: 0x5A4b203939F9757A703e009fA9B733Cf33d5821b
				"--account", "0x29c8b4ff78e41dafd561f5cd4a90103faf20a5b509a4b6281947b8fcdcfa8f71,100000000000000000000",
			},
		},
		Started: true,
	}
	container, err := testcontainers.GenericContainer(ctx, req)
	if err != nil {
		t.Fatalf("failed to create container: %v", err)
	}
	p, err := container.MappedPort(ctx, "8545/tcp")
	if err != nil {
		t.Fatalf("failed to get mapped port: %v", err)
	}
	// wait for the chain to be ready
	time.Sleep(time.Second)

	return container, p.Port()
}
