// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package faucet is a generated GoMock package.
package faucet

import (
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
)

// MockFaucet is a mock of IFaucet interface.
type MockFaucet struct {
	ctrl     *gomock.Controller
	recorder *MockFaucetMockRecorder
}

// MockFaucetMockRecorder is the mock recorder for MockFaucet.
type MockFaucetMockRecorder struct {
	mock *MockFaucet
}

// NewMockFaucet creates a new mock instance.
func NewMockFaucet(ctrl *gomock.Controller) *MockFaucet {
	mock := &MockFaucet{ctrl: ctrl}
	mock.recorder = &MockFaucetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFaucet) EXPECT() *MockFaucetMockRecorder {
	return m.recorder
}

// ClaimTokens mocks base method.
func (m *MockFaucet) ClaimTokens(ip, phrase string, receiver common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimTokens", ip, phrase, receiver)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClaimTokens indicates an expected call of ClaimTokens.
func (mr *MockFaucetMockRecorder) ClaimTokens(ip, phrase, receiver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimTokens", reflect.TypeOf((*MockFaucet)(nil).ClaimTokens), ip, phrase, receiver)
}

// RequestTokens mocks base method.
func (m *MockFaucet) RequestTokens(ip string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestTokens", ip)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestTokens indicates an expected call of RequestTokens.
func (mr *MockFaucetMockRecorder) RequestTokens(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestTokens", reflect.TypeOf((*MockFaucet)(nil).RequestTokens), ip)
}

// MockFaucetPhraseGenerator is a mock of IFaucetPhraseGenerator interface.
type MockFaucetPhraseGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockFaucetPhraseGeneratorMockRecorder
}

// MockFaucetPhraseGeneratorMockRecorder is the mock recorder for MockFaucetPhraseGenerator.
type MockFaucetPhraseGeneratorMockRecorder struct {
	mock *MockFaucetPhraseGenerator
}

// NewMockFaucetPhraseGenerator creates a new mock instance.
func NewMockFaucetPhraseGenerator(ctrl *gomock.Controller) *MockFaucetPhraseGenerator {
	mock := &MockFaucetPhraseGenerator{ctrl: ctrl}
	mock.recorder = &MockFaucetPhraseGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFaucetPhraseGenerator) EXPECT() *MockFaucetPhraseGeneratorMockRecorder {
	return m.recorder
}

// GeneratePhrase mocks base method.
func (m *MockFaucetPhraseGenerator) GeneratePhrase() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePhrase")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePhrase indicates an expected call of GeneratePhrase.
func (mr *MockFaucetPhraseGeneratorMockRecorder) GeneratePhrase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePhrase", reflect.TypeOf((*MockFaucetPhraseGenerator)(nil).GeneratePhrase))
}

// MockFaucetWallet is a mock of IFaucetWallet interface.
type MockFaucetWallet struct {
	ctrl     *gomock.Controller
	recorder *MockFaucetWalletMockRecorder
}

// MockFaucetWalletMockRecorder is the mock recorder for MockFaucetWallet.
type MockFaucetWalletMockRecorder struct {
	mock *MockFaucetWallet
}

// NewMockFaucetWallet creates a new mock instance.
func NewMockFaucetWallet(ctrl *gomock.Controller) *MockFaucetWallet {
	mock := &MockFaucetWallet{ctrl: ctrl}
	mock.recorder = &MockFaucetWalletMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFaucetWallet) EXPECT() *MockFaucetWalletMockRecorder {
	return m.recorder
}

// SendWeiToAddress mocks base method.
func (m *MockFaucetWallet) SendWeiToAddress(amount *big.Int, receiver common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWeiToAddress", amount, receiver)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWeiToAddress indicates an expected call of SendWeiToAddress.
func (mr *MockFaucetWalletMockRecorder) SendWeiToAddress(amount, receiver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWeiToAddress", reflect.TypeOf((*MockFaucetWallet)(nil).SendWeiToAddress), amount, receiver)
}
