// Code generated by MockGen. DO NOT EDIT.
// Source: rpc.go

// Package rpc is a generated GoMock package.
package rpc

import (
	context "context"
	types "ftm-explorer/internal/types"
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	hexutil "github.com/ethereum/go-ethereum/common/hexutil"
	types0 "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
)

// MockRpc is a mock of IRpc interface.
type MockRpc struct {
	ctrl     *gomock.Controller
	recorder *MockRpcMockRecorder
}

// MockRpcMockRecorder is the mock recorder for MockRpc.
type MockRpcMockRecorder struct {
	mock *MockRpc
}

// NewMockRpc creates a new mock instance.
func NewMockRpc(ctrl *gomock.Controller) *MockRpc {
	mock := &MockRpc{ctrl: ctrl}
	mock.recorder = &MockRpcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRpc) EXPECT() *MockRpcMockRecorder {
	return m.recorder
}

// AccountBalance mocks base method.
func (m *MockRpc) AccountBalance(arg0 context.Context, arg1 common.Address) (*hexutil.Big, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountBalance", arg0, arg1)
	ret0, _ := ret[0].(*hexutil.Big)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountBalance indicates an expected call of AccountBalance.
func (mr *MockRpcMockRecorder) AccountBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountBalance", reflect.TypeOf((*MockRpc)(nil).AccountBalance), arg0, arg1)
}

// BlockByNumber mocks base method.
func (m *MockRpc) BlockByNumber(arg0 context.Context, arg1 uint64) (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByNumber", arg0, arg1)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByNumber indicates an expected call of BlockByNumber.
func (mr *MockRpcMockRecorder) BlockByNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByNumber", reflect.TypeOf((*MockRpc)(nil).BlockByNumber), arg0, arg1)
}

// Close mocks base method.
func (m *MockRpc) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRpcMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRpc)(nil).Close))
}

// NetworkID mocks base method.
func (m *MockRpc) NetworkID(arg0 context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkID", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkID indicates an expected call of NetworkID.
func (mr *MockRpcMockRecorder) NetworkID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkID", reflect.TypeOf((*MockRpc)(nil).NetworkID), arg0)
}

// NumberOfValidators mocks base method.
func (m *MockRpc) NumberOfValidators(arg0 context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberOfValidators", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberOfValidators indicates an expected call of NumberOfValidators.
func (mr *MockRpcMockRecorder) NumberOfValidators(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberOfValidators", reflect.TypeOf((*MockRpc)(nil).NumberOfValidators), arg0)
}

// ObservedHeadProxy mocks base method.
func (m *MockRpc) ObservedHeadProxy() <-chan *types0.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObservedHeadProxy")
	ret0, _ := ret[0].(<-chan *types0.Header)
	return ret0
}

// ObservedHeadProxy indicates an expected call of ObservedHeadProxy.
func (mr *MockRpcMockRecorder) ObservedHeadProxy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObservedHeadProxy", reflect.TypeOf((*MockRpc)(nil).ObservedHeadProxy))
}

// PendingNonceAt mocks base method.
func (m *MockRpc) PendingNonceAt(arg0 context.Context, arg1 common.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingNonceAt", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingNonceAt indicates an expected call of PendingNonceAt.
func (mr *MockRpcMockRecorder) PendingNonceAt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingNonceAt", reflect.TypeOf((*MockRpc)(nil).PendingNonceAt), arg0, arg1)
}

// SendSignedTransaction mocks base method.
func (m *MockRpc) SendSignedTransaction(arg0 context.Context, arg1 *types0.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSignedTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSignedTransaction indicates an expected call of SendSignedTransaction.
func (mr *MockRpcMockRecorder) SendSignedTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSignedTransaction", reflect.TypeOf((*MockRpc)(nil).SendSignedTransaction), arg0, arg1)
}

// SuggestGasPrice mocks base method.
func (m *MockRpc) SuggestGasPrice(arg0 context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestGasPrice", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestGasPrice indicates an expected call of SuggestGasPrice.
func (mr *MockRpcMockRecorder) SuggestGasPrice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestGasPrice", reflect.TypeOf((*MockRpc)(nil).SuggestGasPrice), arg0)
}

// TransactionByHash mocks base method.
func (m *MockRpc) TransactionByHash(arg0 context.Context, arg1 common.Hash) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionByHash", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionByHash indicates an expected call of TransactionByHash.
func (mr *MockRpcMockRecorder) TransactionByHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionByHash", reflect.TypeOf((*MockRpc)(nil).TransactionByHash), arg0, arg1)
}
