// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	db_types "ftm-explorer/internal/repository/db/types"
	types "ftm-explorer/internal/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of IDatabase interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AddBlock mocks base method.
func (m *MockDatabase) AddBlock(arg0 context.Context, arg1 *types.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBlock indicates an expected call of AddBlock.
func (mr *MockDatabaseMockRecorder) AddBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlock", reflect.TypeOf((*MockDatabase)(nil).AddBlock), arg0, arg1)
}

// Block mocks base method.
func (m *MockDatabase) Block(arg0 context.Context, arg1 uint64) (*db_types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block", arg0, arg1)
	ret0, _ := ret[0].(*db_types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Block indicates an expected call of Block.
func (mr *MockDatabaseMockRecorder) Block(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockDatabase)(nil).Block), arg0, arg1)
}

// Close mocks base method.
func (m *MockDatabase) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// GasUsedAggByTimestamp mocks base method.
func (m *MockDatabase) GasUsedAggByTimestamp(arg0 context.Context, arg1 uint64, arg2, arg3 uint) ([]types.HexUintTick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasUsedAggByTimestamp", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]types.HexUintTick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GasUsedAggByTimestamp indicates an expected call of GasUsedAggByTimestamp.
func (mr *MockDatabaseMockRecorder) GasUsedAggByTimestamp(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasUsedAggByTimestamp", reflect.TypeOf((*MockDatabase)(nil).GasUsedAggByTimestamp), arg0, arg1, arg2, arg3)
}

// IncrementTrxCount mocks base method.
func (m *MockDatabase) IncrementTrxCount(arg0 context.Context, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementTrxCount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementTrxCount indicates an expected call of IncrementTrxCount.
func (mr *MockDatabaseMockRecorder) IncrementTrxCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementTrxCount", reflect.TypeOf((*MockDatabase)(nil).IncrementTrxCount), arg0, arg1)
}

// TrxCount mocks base method.
func (m *MockDatabase) TrxCount(arg0 context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrxCount", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrxCount indicates an expected call of TrxCount.
func (mr *MockDatabaseMockRecorder) TrxCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrxCount", reflect.TypeOf((*MockDatabase)(nil).TrxCount), arg0)
}

// TrxCountAggByTimestamp mocks base method.
func (m *MockDatabase) TrxCountAggByTimestamp(arg0 context.Context, arg1 uint64, arg2, arg3 uint) ([]types.HexUintTick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrxCountAggByTimestamp", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]types.HexUintTick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrxCountAggByTimestamp indicates an expected call of TrxCountAggByTimestamp.
func (mr *MockDatabaseMockRecorder) TrxCountAggByTimestamp(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrxCountAggByTimestamp", reflect.TypeOf((*MockDatabase)(nil).TrxCountAggByTimestamp), arg0, arg1, arg2, arg3)
}
