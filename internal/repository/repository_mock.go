// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package repository is a generated GoMock package.
package repository

import (
	db_types "ftm-explorer/internal/repository/db/types"
	types "ftm-explorer/internal/types"
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	hexutil "github.com/ethereum/go-ethereum/common/hexutil"
	types0 "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of IRepository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AccountBalance mocks base method.
func (m *MockRepository) AccountBalance(arg0 common.Address) (*hexutil.Big, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountBalance", arg0)
	ret0, _ := ret[0].(*hexutil.Big)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountBalance indicates an expected call of AccountBalance.
func (mr *MockRepositoryMockRecorder) AccountBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountBalance", reflect.TypeOf((*MockRepository)(nil).AccountBalance), arg0)
}

// AddAccounts mocks base method.
func (m *MockRepository) AddAccounts(accs []common.Address, stamp int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccounts", accs, stamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccounts indicates an expected call of AddAccounts.
func (mr *MockRepositoryMockRecorder) AddAccounts(accs, stamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccounts", reflect.TypeOf((*MockRepository)(nil).AddAccounts), accs, stamp)
}

// AddTimeToFinality mocks base method.
func (m *MockRepository) AddTimeToFinality(arg0 *types.Ttf) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTimeToFinality", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTimeToFinality indicates an expected call of AddTimeToFinality.
func (mr *MockRepositoryMockRecorder) AddTimeToFinality(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTimeToFinality", reflect.TypeOf((*MockRepository)(nil).AddTimeToFinality), arg0)
}

// AddTokensRequest mocks base method.
func (m *MockRepository) AddTokensRequest(arg0 *types.TokensRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTokensRequest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTokensRequest indicates an expected call of AddTokensRequest.
func (mr *MockRepositoryMockRecorder) AddTokensRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTokensRequest", reflect.TypeOf((*MockRepository)(nil).AddTokensRequest), arg0)
}

// AddTransactions mocks base method.
func (m *MockRepository) AddTransactions(arg0 []db_types.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransactions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTransactions indicates an expected call of AddTransactions.
func (mr *MockRepositoryMockRecorder) AddTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransactions", reflect.TypeOf((*MockRepository)(nil).AddTransactions), arg0)
}

// FetchDiskSizePer100MTxs mocks base method.
func (m *MockRepository) FetchDiskSizePer100MTxs() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDiskSizePer100MTxs")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDiskSizePer100MTxs indicates an expected call of FetchDiskSizePer100MTxs.
func (mr *MockRepositoryMockRecorder) FetchDiskSizePer100MTxs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDiskSizePer100MTxs", reflect.TypeOf((*MockRepository)(nil).FetchDiskSizePer100MTxs))
}

// FetchNumberOfAccounts mocks base method.
func (m *MockRepository) FetchNumberOfAccounts() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchNumberOfAccounts")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchNumberOfAccounts indicates an expected call of FetchNumberOfAccounts.
func (mr *MockRepositoryMockRecorder) FetchNumberOfAccounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchNumberOfAccounts", reflect.TypeOf((*MockRepository)(nil).FetchNumberOfAccounts))
}

// FetchTimeToFinality mocks base method.
func (m *MockRepository) FetchTimeToFinality() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTimeToFinality")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTimeToFinality indicates an expected call of FetchTimeToFinality.
func (mr *MockRepositoryMockRecorder) FetchTimeToFinality() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTimeToFinality", reflect.TypeOf((*MockRepository)(nil).FetchTimeToFinality))
}

// GetBlockByNumber mocks base method.
func (m *MockRepository) GetBlockByNumber(arg0 uint64) (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByNumber", arg0)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber.
func (mr *MockRepositoryMockRecorder) GetBlockByNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockRepository)(nil).GetBlockByNumber), arg0)
}

// GetDiskSizePer100MTxs mocks base method.
func (m *MockRepository) GetDiskSizePer100MTxs() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskSizePer100MTxs")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetDiskSizePer100MTxs indicates an expected call of GetDiskSizePer100MTxs.
func (mr *MockRepositoryMockRecorder) GetDiskSizePer100MTxs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskSizePer100MTxs", reflect.TypeOf((*MockRepository)(nil).GetDiskSizePer100MTxs))
}

// GetGasUsedAggByTimestamp mocks base method.
func (m *MockRepository) GetGasUsedAggByTimestamp(arg0 types.AggResolution, arg1 uint, arg2 *uint64) ([]types.HexUintTick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasUsedAggByTimestamp", arg0, arg1, arg2)
	ret0, _ := ret[0].([]types.HexUintTick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGasUsedAggByTimestamp indicates an expected call of GetGasUsedAggByTimestamp.
func (mr *MockRepositoryMockRecorder) GetGasUsedAggByTimestamp(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasUsedAggByTimestamp", reflect.TypeOf((*MockRepository)(nil).GetGasUsedAggByTimestamp), arg0, arg1, arg2)
}

// GetGasUsedPer10Secs mocks base method.
func (m *MockRepository) GetGasUsedPer10Secs() []types.HexUintTick {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasUsedPer10Secs")
	ret0, _ := ret[0].([]types.HexUintTick)
	return ret0
}

// GetGasUsedPer10Secs indicates an expected call of GetGasUsedPer10Secs.
func (mr *MockRepositoryMockRecorder) GetGasUsedPer10Secs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasUsedPer10Secs", reflect.TypeOf((*MockRepository)(nil).GetGasUsedPer10Secs))
}

// GetLastTransactionsWhereAddress mocks base method.
func (m *MockRepository) GetLastTransactionsWhereAddress(arg0 common.Address, arg1 uint) ([]db_types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastTransactionsWhereAddress", arg0, arg1)
	ret0, _ := ret[0].([]db_types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastTransactionsWhereAddress indicates an expected call of GetLastTransactionsWhereAddress.
func (mr *MockRepositoryMockRecorder) GetLastTransactionsWhereAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastTransactionsWhereAddress", reflect.TypeOf((*MockRepository)(nil).GetLastTransactionsWhereAddress), arg0, arg1)
}

// GetLatestClaimedTokensRequests mocks base method.
func (m *MockRepository) GetLatestClaimedTokensRequests(arg0 string, arg1 uint64) ([]types.TokensRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestClaimedTokensRequests", arg0, arg1)
	ret0, _ := ret[0].([]types.TokensRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestClaimedTokensRequests indicates an expected call of GetLatestClaimedTokensRequests.
func (mr *MockRepositoryMockRecorder) GetLatestClaimedTokensRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestClaimedTokensRequests", reflect.TypeOf((*MockRepository)(nil).GetLatestClaimedTokensRequests), arg0, arg1)
}

// GetLatestObservedBlock mocks base method.
func (m *MockRepository) GetLatestObservedBlock() *types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestObservedBlock")
	ret0, _ := ret[0].(*types.Block)
	return ret0
}

// GetLatestObservedBlock indicates an expected call of GetLatestObservedBlock.
func (mr *MockRepositoryMockRecorder) GetLatestObservedBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestObservedBlock", reflect.TypeOf((*MockRepository)(nil).GetLatestObservedBlock))
}

// GetLatestObservedBlocks mocks base method.
func (m *MockRepository) GetLatestObservedBlocks(arg0 uint) []*types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestObservedBlocks", arg0)
	ret0, _ := ret[0].([]*types.Block)
	return ret0
}

// GetLatestObservedBlocks indicates an expected call of GetLatestObservedBlocks.
func (mr *MockRepositoryMockRecorder) GetLatestObservedBlocks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestObservedBlocks", reflect.TypeOf((*MockRepository)(nil).GetLatestObservedBlocks), arg0)
}

// GetLatestUnclaimedTokensRequest mocks base method.
func (m *MockRepository) GetLatestUnclaimedTokensRequest(arg0 string) (*types.TokensRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestUnclaimedTokensRequest", arg0)
	ret0, _ := ret[0].(*types.TokensRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestUnclaimedTokensRequest indicates an expected call of GetLatestUnclaimedTokensRequest.
func (mr *MockRepositoryMockRecorder) GetLatestUnclaimedTokensRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestUnclaimedTokensRequest", reflect.TypeOf((*MockRepository)(nil).GetLatestUnclaimedTokensRequest), arg0)
}

// GetNewHeadersChannel mocks base method.
func (m *MockRepository) GetNewHeadersChannel() <-chan *types0.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewHeadersChannel")
	ret0, _ := ret[0].(<-chan *types0.Header)
	return ret0
}

// GetNewHeadersChannel indicates an expected call of GetNewHeadersChannel.
func (mr *MockRepositoryMockRecorder) GetNewHeadersChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewHeadersChannel", reflect.TypeOf((*MockRepository)(nil).GetNewHeadersChannel))
}

// GetNumberOfAccounts mocks base method.
func (m *MockRepository) GetNumberOfAccounts() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumberOfAccounts")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNumberOfAccounts indicates an expected call of GetNumberOfAccounts.
func (mr *MockRepositoryMockRecorder) GetNumberOfAccounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumberOfAccounts", reflect.TypeOf((*MockRepository)(nil).GetNumberOfAccounts))
}

// GetNumberOfAccountsInDb mocks base method.
func (m *MockRepository) GetNumberOfAccountsInDb() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumberOfAccountsInDb")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumberOfAccountsInDb indicates an expected call of GetNumberOfAccountsInDb.
func (mr *MockRepositoryMockRecorder) GetNumberOfAccountsInDb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumberOfAccountsInDb", reflect.TypeOf((*MockRepository)(nil).GetNumberOfAccountsInDb))
}

// GetNumberOfValidators mocks base method.
func (m *MockRepository) GetNumberOfValidators() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumberOfValidators")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumberOfValidators indicates an expected call of GetNumberOfValidators.
func (mr *MockRepositoryMockRecorder) GetNumberOfValidators() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumberOfValidators", reflect.TypeOf((*MockRepository)(nil).GetNumberOfValidators))
}

// GetTimeToBlock mocks base method.
func (m *MockRepository) GetTimeToBlock() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeToBlock")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetTimeToBlock indicates an expected call of GetTimeToBlock.
func (mr *MockRepositoryMockRecorder) GetTimeToBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeToBlock", reflect.TypeOf((*MockRepository)(nil).GetTimeToBlock))
}

// GetTimeToFinality mocks base method.
func (m *MockRepository) GetTimeToFinality() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeToFinality")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetTimeToFinality indicates an expected call of GetTimeToFinality.
func (mr *MockRepositoryMockRecorder) GetTimeToFinality() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeToFinality", reflect.TypeOf((*MockRepository)(nil).GetTimeToFinality))
}

// GetTimeToFinalityPer10Secs mocks base method.
func (m *MockRepository) GetTimeToFinalityPer10Secs() []types.FloatTick {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeToFinalityPer10Secs")
	ret0, _ := ret[0].([]types.FloatTick)
	return ret0
}

// GetTimeToFinalityPer10Secs indicates an expected call of GetTimeToFinalityPer10Secs.
func (mr *MockRepositoryMockRecorder) GetTimeToFinalityPer10Secs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeToFinalityPer10Secs", reflect.TypeOf((*MockRepository)(nil).GetTimeToFinalityPer10Secs))
}

// GetTransactionByHash mocks base method.
func (m *MockRepository) GetTransactionByHash(arg0 common.Hash) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByHash", arg0)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByHash indicates an expected call of GetTransactionByHash.
func (mr *MockRepositoryMockRecorder) GetTransactionByHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByHash", reflect.TypeOf((*MockRepository)(nil).GetTransactionByHash), arg0)
}

// GetTrxCount mocks base method.
func (m *MockRepository) GetTrxCount() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrxCount")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrxCount indicates an expected call of GetTrxCount.
func (mr *MockRepositoryMockRecorder) GetTrxCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrxCount", reflect.TypeOf((*MockRepository)(nil).GetTrxCount))
}

// GetTrxCountAggByTimestamp mocks base method.
func (m *MockRepository) GetTrxCountAggByTimestamp(arg0 types.AggResolution, arg1 uint, arg2 *uint64) ([]types.HexUintTick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrxCountAggByTimestamp", arg0, arg1, arg2)
	ret0, _ := ret[0].([]types.HexUintTick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrxCountAggByTimestamp indicates an expected call of GetTrxCountAggByTimestamp.
func (mr *MockRepositoryMockRecorder) GetTrxCountAggByTimestamp(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrxCountAggByTimestamp", reflect.TypeOf((*MockRepository)(nil).GetTrxCountAggByTimestamp), arg0, arg1, arg2)
}

// GetTtfAvgAggByTimestamp mocks base method.
func (m *MockRepository) GetTtfAvgAggByTimestamp(arg0 types.AggResolution, arg1 uint, arg2 uint64) ([]types.FloatTick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTtfAvgAggByTimestamp", arg0, arg1, arg2)
	ret0, _ := ret[0].([]types.FloatTick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTtfAvgAggByTimestamp indicates an expected call of GetTtfAvgAggByTimestamp.
func (mr *MockRepositoryMockRecorder) GetTtfAvgAggByTimestamp(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTtfAvgAggByTimestamp", reflect.TypeOf((*MockRepository)(nil).GetTtfAvgAggByTimestamp), arg0, arg1, arg2)
}

// GetTxCountPer10Secs mocks base method.
func (m *MockRepository) GetTxCountPer10Secs() []types.HexUintTick {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxCountPer10Secs")
	ret0, _ := ret[0].([]types.HexUintTick)
	return ret0
}

// GetTxCountPer10Secs indicates an expected call of GetTxCountPer10Secs.
func (mr *MockRepositoryMockRecorder) GetTxCountPer10Secs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxCountPer10Secs", reflect.TypeOf((*MockRepository)(nil).GetTxCountPer10Secs))
}

// IncrementTrxCount mocks base method.
func (m *MockRepository) IncrementTrxCount(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementTrxCount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementTrxCount indicates an expected call of IncrementTrxCount.
func (mr *MockRepositoryMockRecorder) IncrementTrxCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementTrxCount", reflect.TypeOf((*MockRepository)(nil).IncrementTrxCount), arg0)
}

// NetworkID mocks base method.
func (m *MockRepository) NetworkID() (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkID")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkID indicates an expected call of NetworkID.
func (mr *MockRepositoryMockRecorder) NetworkID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkID", reflect.TypeOf((*MockRepository)(nil).NetworkID))
}

// PendingNonceAt mocks base method.
func (m *MockRepository) PendingNonceAt(arg0 common.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingNonceAt", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingNonceAt indicates an expected call of PendingNonceAt.
func (mr *MockRepositoryMockRecorder) PendingNonceAt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingNonceAt", reflect.TypeOf((*MockRepository)(nil).PendingNonceAt), arg0)
}

// SendSignedTransaction mocks base method.
func (m *MockRepository) SendSignedTransaction(arg0 *types0.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSignedTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSignedTransaction indicates an expected call of SendSignedTransaction.
func (mr *MockRepositoryMockRecorder) SendSignedTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSignedTransaction", reflect.TypeOf((*MockRepository)(nil).SendSignedTransaction), arg0)
}

// SetDiskSizePer100MTxs mocks base method.
func (m *MockRepository) SetDiskSizePer100MTxs(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDiskSizePer100MTxs", arg0)
}

// SetDiskSizePer100MTxs indicates an expected call of SetDiskSizePer100MTxs.
func (mr *MockRepositoryMockRecorder) SetDiskSizePer100MTxs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDiskSizePer100MTxs", reflect.TypeOf((*MockRepository)(nil).SetDiskSizePer100MTxs), arg0)
}

// SetGasUsedPer10Secs mocks base method.
func (m *MockRepository) SetGasUsedPer10Secs(arg0 []types.HexUintTick) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGasUsedPer10Secs", arg0)
}

// SetGasUsedPer10Secs indicates an expected call of SetGasUsedPer10Secs.
func (mr *MockRepositoryMockRecorder) SetGasUsedPer10Secs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGasUsedPer10Secs", reflect.TypeOf((*MockRepository)(nil).SetGasUsedPer10Secs), arg0)
}

// SetNumberOfAccounts mocks base method.
func (m *MockRepository) SetNumberOfAccounts(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNumberOfAccounts", arg0)
}

// SetNumberOfAccounts indicates an expected call of SetNumberOfAccounts.
func (mr *MockRepositoryMockRecorder) SetNumberOfAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNumberOfAccounts", reflect.TypeOf((*MockRepository)(nil).SetNumberOfAccounts), arg0)
}

// SetTimeToFinalityPer10Secs mocks base method.
func (m *MockRepository) SetTimeToFinalityPer10Secs(arg0 []types.FloatTick) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimeToFinalityPer10Secs", arg0)
}

// SetTimeToFinalityPer10Secs indicates an expected call of SetTimeToFinalityPer10Secs.
func (mr *MockRepositoryMockRecorder) SetTimeToFinalityPer10Secs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeToFinalityPer10Secs", reflect.TypeOf((*MockRepository)(nil).SetTimeToFinalityPer10Secs), arg0)
}

// SetTxCountPer10Secs mocks base method.
func (m *MockRepository) SetTxCountPer10Secs(arg0 []types.HexUintTick) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTxCountPer10Secs", arg0)
}

// SetTxCountPer10Secs indicates an expected call of SetTxCountPer10Secs.
func (mr *MockRepositoryMockRecorder) SetTxCountPer10Secs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTxCountPer10Secs", reflect.TypeOf((*MockRepository)(nil).SetTxCountPer10Secs), arg0)
}

// ShrinkTransactions mocks base method.
func (m *MockRepository) ShrinkTransactions(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShrinkTransactions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShrinkTransactions indicates an expected call of ShrinkTransactions.
func (mr *MockRepositoryMockRecorder) ShrinkTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShrinkTransactions", reflect.TypeOf((*MockRepository)(nil).ShrinkTransactions), arg0)
}

// ShrinkTtf mocks base method.
func (m *MockRepository) ShrinkTtf(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShrinkTtf", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShrinkTtf indicates an expected call of ShrinkTtf.
func (mr *MockRepositoryMockRecorder) ShrinkTtf(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShrinkTtf", reflect.TypeOf((*MockRepository)(nil).ShrinkTtf), arg0)
}

// SuggestGasPrice mocks base method.
func (m *MockRepository) SuggestGasPrice() (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestGasPrice")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestGasPrice indicates an expected call of SuggestGasPrice.
func (mr *MockRepositoryMockRecorder) SuggestGasPrice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestGasPrice", reflect.TypeOf((*MockRepository)(nil).SuggestGasPrice))
}

// UpdateLatestObservedBlock mocks base method.
func (m *MockRepository) UpdateLatestObservedBlock(arg0 *types.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLatestObservedBlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLatestObservedBlock indicates an expected call of UpdateLatestObservedBlock.
func (mr *MockRepositoryMockRecorder) UpdateLatestObservedBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLatestObservedBlock", reflect.TypeOf((*MockRepository)(nil).UpdateLatestObservedBlock), arg0)
}

// UpdateTokensRequest mocks base method.
func (m *MockRepository) UpdateTokensRequest(arg0 *types.TokensRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTokensRequest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTokensRequest indicates an expected call of UpdateTokensRequest.
func (mr *MockRepositoryMockRecorder) UpdateTokensRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTokensRequest", reflect.TypeOf((*MockRepository)(nil).UpdateTokensRequest), arg0)
}
