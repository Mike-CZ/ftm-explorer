# Root schema definition
schema {
    query: Query
    mutation: Mutation
}

# Entry points for querying the API
type Query {
    # State represents the current state of the blockchain and network.
    state: CurrentState!

    # Get transaction information for given transaction hash.
    transaction(hash:Bytes32!):Transaction

    # Get block information by number.
    block(number:Long!):Block

    # Get recent observed blocks
    recentBlocks(limit:Int!):[Block!]!

    # Get current block height
    currentBlockHeight:Long

    # Get total number of accounts
    numberOfAccounts:Int!

    # Get total number of transactions
    numberOfTransactions:Long!

    # Get total number of validators
    numberOfValidators:Int!

    # Get disk size per 100M transactions in bytes
    diskSizePer100MTxs:Long!

    # Get disk size pruned per 100M transactions in bytes
    diskSizePrunedPer100MTxs:Long!

    # Get time to finality in seconds (rounded to 2 decimal places)
    timeToFinality:Float!

    # Get time to block in seconds (rounded to 2 decimal places)
    timeToBlock:Float!

    # Get block aggregated data by timestamp. It returns last 60 ticks aggregated
    # by 10 seconds.
    # parameters:
    #   subject: the subject of the aggregation - value of AggSubject enum
    blockTimestampAggregations(subject: AggSubject!):[Tick!]!

    # Get ttf aggregated data by timestamp. It returns last 60 ticks aggregated
    # by 10 seconds.
    ttfTimestampAggregations:[TtfTick!]!

    # Get an Account information by hash address.
    account(address:Address!):Account!

    # Get idle state of the blockchain.
    isIdle: Boolean!
}

type Mutation {
    # Send request to obtain tokens from faucet. Returns phrase that should be signed by the user.
    requestTokens(symbol: String): String!

    # Send signed phrase to faucet to obtain tokens.
    claimTokens(address: Address!, challenge: String!, signature: String!, erc20Address: Address): Boolean!
}
