// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package maze is a generated GoMock package.
package maze

import (
	types "ftm-explorer/internal/types"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
)

// MockMaze is a mock of IMaze interface.
type MockMaze struct {
	ctrl     *gomock.Controller
	recorder *MockMazeMockRecorder
}

// MockMazeMockRecorder is the mock recorder for MockMaze.
type MockMazeMockRecorder struct {
	mock *MockMaze
}

// NewMockMaze creates a new mock instance.
func NewMockMaze(ctrl *gomock.Controller) *MockMaze {
	mock := &MockMaze{ctrl: ctrl}
	mock.recorder = &MockMazeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMaze) EXPECT() *MockMazeMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockMaze) Exists(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockMazeMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockMaze)(nil).Exists), arg0)
}

// GenerateChallenge mocks base method.
func (m *MockMaze) GenerateChallenge() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateChallenge")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateChallenge indicates an expected call of GenerateChallenge.
func (mr *MockMazeMockRecorder) GenerateChallenge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChallenge", reflect.TypeOf((*MockMaze)(nil).GenerateChallenge))
}

// GetMaze mocks base method.
func (m *MockMaze) GetMaze(arg0 common.Address) *types.Maze {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaze", arg0)
	ret0, _ := ret[0].(*types.Maze)
	return ret0
}

// GetMaze indicates an expected call of GetMaze.
func (mr *MockMazeMockRecorder) GetMaze(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaze", reflect.TypeOf((*MockMaze)(nil).GetMaze), arg0)
}

// GetMazeList mocks base method.
func (m *MockMaze) GetMazeList() []*types.Maze {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMazeList")
	ret0, _ := ret[0].([]*types.Maze)
	return ret0
}

// GetMazeList indicates an expected call of GetMazeList.
func (mr *MockMazeMockRecorder) GetMazeList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMazeList", reflect.TypeOf((*MockMaze)(nil).GetMazeList))
}

// TileToPosition mocks base method.
func (m *MockMaze) TileToPosition(arg0 common.Address, arg1 int32) (*types.MazePosition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TileToPosition", arg0, arg1)
	ret0, _ := ret[0].(*types.MazePosition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TileToPosition indicates an expected call of TileToPosition.
func (mr *MockMazeMockRecorder) TileToPosition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TileToPosition", reflect.TypeOf((*MockMaze)(nil).TileToPosition), arg0, arg1)
}
